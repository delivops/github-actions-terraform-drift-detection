name: 'Delivops Terraform Drift Detection Workflow'
description: 'This GitHub Action runs Terraform plan on the specified environment, and checks for drifts.'
author: 'delivops'
branding: 
  icon: 'check-square'
  color: 'green'

inputs:
  working_directory:
    description: 'The working directory'
    required: true
    default: 'env/global'
  slack_webhook:
    description: 'Slack webhook URL'
    required: true
  environment:
    description: 'The environment (e.g., dev, prod)' 
    required: true
  aws_region:
    description: 'AWS region'
    required: true
  aws_role:
    description: 'AWS role to assume'
    required: true
  aws_account_id:
    required: true
  github_token:
    description: 'GitHub token'
    required: true   

runs:
  using: 'composite' 
  steps:
    - name: Checkout the repository to the GitHub Actions runner
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
      
    - name: Configure AWS credentials via OIDC
      id: auth
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: "arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role }}"

    - name: Terraform Init
      run: terraform init
      shell: bash  
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Plan
      id: tf-plan
      shell: bash
      working-directory: ${{ inputs.working_directory }}     
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed for environment ${{ inputs.environment }}!"
          exit 1
        else 
          echo "Terraform Plan successful for environment ${{ inputs.environment }}!"
          exit 0
        fi
        
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    - name: Create String Output
      id: tf-plan-string
      working-directory: ${{ inputs.working_directory }}
      shell: bash   
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output for environment ${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    - name: Publish Terraform Plan to Task Summary
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        
    # If changes are detected, create a new issue
    - name: Publish Drift Report
      id: report
      if: steps.tf-plan.outputs.exitcode == 2
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const body = `${process.env.SUMMARY}`;
          const title = 'Drift Detection in ${{ inputs.environment }}';
          const creator = 'github-actions[bot]'

          // Look to see if there is an existing drift issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator,
          });
          const existingIssue = issues.data.find(issue => issue.title === title); 
          
          if( existingIssue ) {
            if (existingIssue.body === body) {
              console.log('Drift Detected: Found matching issue with duplicate content');
            } else {
              console.log('Drift Detected: Updating existing issue');
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            }
          } else {
            console.log('Drift Detected: Creating new issue');
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            });
          }

    # If changes aren't detected, close only the relevant environment's issue
    - name: Close Drift Issue if No Changes
      if: steps.tf-plan.outputs.exitcode == 0
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        #working-directory: ${{ inputs.working_directory }}      
        script: |
          const title = 'Drift Detection In Global';
          const creator = 'github-actions[bot]'

          // Look for an existing drift issue for this environment
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator
          });

          const existingIssue = issues.data.find(issue => issue.title === title);

          if (existingIssue) {
            console.log('No drift detected: Closing issue');
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
          }

    - name: Slack Notification of drift
      if: steps.tf-plan.outputs.exitcode == 2
      uses: rtCamp/action-slack-notify@v2.3.0     
      env:
        SLACK_COLOR: "#ff0000"
        SLACK_MESSAGE: ":warning: *Terraform Drift Detected* :warning:"
        SLACK_WEBHOOK: ${{ inputs.slack_webhook }}
        
    - name: Publish Failed Drift Report
      if: failure()
      uses: actions/github-script@v7
      with:
        #working-directory: ${{ inputs.working_directory }}    
        github-token: ${{ inputs.github_token }}
        script: |
          const title = 'Drift Detection in ${{ inputs.environment }}';
          const failedBody = 'Terraform Drift Execution Failed';
          const creator = 'github-actions[bot]';

          // Look for an existing drift issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator
          });

          const existingIssue = issues.data.find(issue => issue.title === title);

          if (existingIssue) {
            console.log('Drift failed: Updating existing issue');
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: failedBody
            });
          } else {
            console.log('Drift failed: Creating new issue');
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: failedBody
            });
          }
          
    - name: Slack Notification of failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2.3.0
      env:
        SLACK_COLOR: "#ff0000"
        SLACK_MESSAGE: "ðŸš¨Github action Drift was failedðŸš¨"
        SLACK_WEBHOOK: ${{ inputs.slack_webhook }}
